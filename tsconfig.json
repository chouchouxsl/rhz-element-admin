{
    "compilerOptions": {
        "target": "esnext" /* 指定编译之后的版本目标: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. */,
        "module": "esnext" /* 指定要使用的模块标准: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */,
        "moduleResolution": "node",
        "strict": true /* 启动所有类型检查 */,
        "forceConsistentCasingInFileNames": true,
        "allowSyntheticDefaultImports": true /* 允许从没有默认导出的模块中默认导入 */,
        "strictFunctionTypes": false,
        "jsx": "preserve" /* 指定jsx代码用于的开发环境 */,
        "baseUrl": "." /* 工作根目录 */,
        "allowJs": true /*  允许编译器编译JS，JSX文件  */,
        "sourceMap": true /* 是否生成map文件 */,
        "esModuleInterop": true /* 允许 export=导出，由 import from 导入 */,
        "resolveJsonModule": true,
        "noUnusedLocals": true /* 有未使用的变量时，抛出错误 */,
        "noUnusedParameters": true /* 有未使用的参数时，抛出错误 */,
        "experimentalDecorators": true /* 启用实验性的装饰器特性 */,
        "lib": ["dom", "esnext"] /* 译过程中需要引入的库文件的列表 */,
        "types": [
            "vite/client",
            "jest"
        ] /* 指定引入的类型声明文件，默认是自动引入所有声明文件，一旦指定该选项，则会禁用自动引入，改为只引入指定的类型声明文件，如果指定空数组[]则不引用任何文件 */,
        "typeRoots": ["./node_modules/@types/", "./types"],
        "noImplicitAny": false /* 是否默认禁用 any */,
        "skipLibCheck": true,
        "paths": {
            /* 指定模块的路径，和 baseUrl有关联，和 webpack vite 中 resolve.alias 配置一样 */
            "@/*": ["src/*"],
            "#/*": ["types/*"]
        }
    },
    "include": [
        "src/**/*.ts",
        "src/**/*.d.ts",
        "src/**/*.tsx",
        "src/**/*.vue",
        "types/**/*.d.ts",
        "build/**/*.ts",
        "build/**/*.d.ts",
        "mock/**/*.ts",
        "vite.config.ts"
    ],
    "exclude": ["node_modules", "dist", "**/*.js"]
}
